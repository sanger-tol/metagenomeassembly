/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        enabled: false
    ]

    withName: 'BIN3C_MKMAP' {
        ext.args   = [
            "--min-reflen ${params.minimum_contig_size}",
            "--min-extent ${params.minimum_bin_size}"
        ].join(' ').trim()
        ext.prefix = { "${meta.id}_${meta.assembler}_bin3c"         }
        tag        = { "${meta.id}_${meta.assembler}"               }
        publishDir = [
            path: { "${params.outdir}/bins/log/bin3c" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'BIN3C_CLUSTER' {
        ext.args   = [
            "--min-reflen ${params.minimum_contig_size}",
            "--min-extent ${params.minimum_bin_size}"
        ].join(' ').trim()
        ext.prefix = { "${meta.id}_${meta.assembler}_bin3c" }
        tag        = { "${meta.id}_${meta.assembler}" }
        publishDir = [
            [
            path: { "${params.outdir}/bins/fasta/bin3c" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*.fa.gz"
            ],
            [
            path: { "${params.outdir}/bins/log/bin3c" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> (filename.equals('versions.yml') || filename ==~ /.*\.fa\.gz/ )? null : filename }
            ]
        ]
    }

    withName: 'BIN_RRNAS' {
        ext.prefix = { "${meta.id}_${meta.assembler}_${meta.binner}" }
        tag = { "${meta.id}_${meta.assembler}_${meta.binner}" }
        publishDir = [
            path: { "${params.outdir}/bins/qc/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'BIN_SUMMARY' {
        ext.args   = { "--completeness_score ${params.completeness_score} --contamination_score ${params.contamination_score}" }
        ext.prefix = { "${meta.id}" }
        publishDir = [
            path: { "${params.outdir}/bins/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'BWAMEM2_INDEX' {
        tag = { "${meta.id}_${meta.assembler}" }
    }

    withName: 'CHECKM2_PREDICT' {
        ext.args   = { "--extension gz" }
        ext.prefix = { "${meta.id}.checkm2" }
        tag        = { "${meta.id}" }
        publishDir = [
            path: { "${params.outdir}/bins/qc/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*.tsv"
        ]
    }

    withName: 'CONTIG2BINTOFASTA' {
        ext.prefix = { "${meta.id}_${meta.assembler}_${meta.binner}" }
        tag        = { "${meta.id}_${meta.assembler}_${meta.binner}" }
        publishDir = [
            path: { "${params.outdir}/bins/fasta/${meta.binner}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'COVERM_CONTIG' {
        ext.args   = { "-m metabat --min-read-percent-identity ${params.minimum_hifi_perc_identity}" }
        ext.prefix = { "${meta.id}_${meta.assembler}.minimap2.hifi" }
        tag        = { "${meta.id}_${meta.assembler}" }
        publishDir = [
            path: { "${params.outdir}/assembly/mapping/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*.tsv"
        ]
    }

    withName: 'CRAM_FILTER_ALIGN_BWAMEM2_FIXMATE_SORT' {
        ext.args   = { "" }
        ext.args1  = { "-F0xB00 -n" }
        ext.args2  = { "-5SPp" }
        ext.args3  = { "-mpu" }
        ext.args4  = { "-q ${params.hic_mapping_minq} -F 0x904" }
        ext.args5  = { "-n" }
        ext.prefix = { "${cram.getName()}.${meta.id}_${meta.assembler}.${chunkn}" }
        tag        = { "${cram.getName()}.${meta.id}_${meta.assembler}.${chunkn}" }
    }

    withName: 'DASTOOL_DASTOOL' {
        ext.args   = { "--write_bin_evals" }
        ext.prefix = { "${meta.id}_${meta.assembler}_dastool" }
        tag        = { "${meta.id}_${meta.assembler}" }
        publishDir = [
            path: { "${params.outdir}/bins/log/dastool" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'FIND_CIRCLES' {
        ext.prefix = { "${meta.id}_${meta.assembler}" }
        tag        = { "${meta.id}_${meta.assembler}" }
        publishDir = [
            path: { "${params.outdir}/assembly/qc/" },
            mode: params.publish_dir_mode,
            pattern: "*.list",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'GAWK_FASTATOCONTIG2BIN' {
        ext.prefix = { "${meta.id}_${meta.assembler}_${meta.binner}_contig2bin" }
        ext.suffix = "tsv"
        tag        = { "${meta.id}_${meta.assembler}_${meta.binner}"            }
    }

    withName: 'GAWK_MAGSCOT_PROCESS_CONTIG2BIN' {
        ext.prefix = { "${meta.id}_${meta.assembler}_${meta.binner}" }
        ext.suffix = { "tsv"                                         }
        tag        = { "${meta.id}_${meta.assembler}_${meta.binner}" }
    }

    withName: 'GAWK_MAGSCOT_PROCESS_CONTIG2BIN' {
        ext.args   = { "-v FS='\\t'"                                                    }
        ext.args2  = { "'{OFS = FS} {print \$2,\$1,\"${meta.binner}\"}'"                }
        ext.prefix = { "${meta.id}_${meta.assembler}_${meta.binner}_magscot_contig2bin" }
        ext.suffix = { "tsv"                                                            }
        tag        = { "${meta.id}_${meta.assembler}_${meta.binner}"                    }
    }

    withName: 'GAWK_MAXBIN2_DEPTHS' {
        ext.args   = { "" }
        ext.args2  = { "" }
        ext.prefix = { "empty_file" }
        ext.suffix = { "tsv" }
        tag        = { "${meta.id}_${meta.assembler}" }
    }

    withName: 'GAWK_PROCESS_HMM_TBLOUT' {
        ext.args   = { "-v OFS='\\t'"  }
        ext.args2  = { "'!/^#/ {print \$1,\$4,\$5}'"  }
        ext.prefix = { "${meta.id}_${meta.assembler}" }
        ext.suffix = { "hmm"                          }
        tag        = { "${meta.id}_${meta.assembler}" }
    }

    withName: 'GAWK_TRNASCAN_SUMMARY' {
        ext.prefix = { "${meta.id}_${meta.assembler}_${meta.binner}.trnascan_summary" }
        tag        = { "${meta.id}_${meta.assembler}_${meta.binner}" }
        ext.suffix = { "tsv"                                         }
        publishDir = [
            path: { "${params.outdir}/bins/qc/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'GAWK_RENAME_BINS' {
        ext.prefix = { "${meta.id}_${meta.assembler}_${meta.binner}_contig2bin" }
        ext.args   = { "" }
        ext.args2  = { "'{if(\$2 != prev) { count++ }; print \$1,\"${meta.id}_${meta.assembler}_${meta.binner}_\"count; prev = \$2}'" }
        tag        = { "${meta.id}_${meta.assembler}_${meta.binner}" }
    }

    withName: 'GENOMAD_ENDTOEND' {
        ext.prefix = { "${meta.id}_${meta.assembler}" }
        tag        = { "${meta.id}_${meta.assembler}" }
        publishDir = [
            path: { "${params.outdir}/assembly/qc/" },
            mode: params.publish_dir_mode,
            pattern: "**_summary.tsv",
            saveAs: { filename -> filename.contains('/') ? filename.replaceFirst(".*/", "") : null }
        ]
    }

    withName: 'GENOME_STATS_ASSEMBLIES' {
        ext.args   = { "-b -a" }
        ext.prefix = { "${meta.id}_${meta.assembler}.stats" }
        tag        = { "${meta.id}_${meta.assembler}" }
        publishDir = [
            path: { "${params.outdir}/assembly/qc/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'GENOME_STATS_BINS' {
        ext.args   = { "-b -a" }
        ext.prefix = { "${meta.id}_${meta.assembler}_${meta.binner}.stats" }
        tag        = { "${meta.id}_${meta.assembler}_${meta.binner}" }
        publishDir = [
            path: { "${params.outdir}/bins/qc/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'GTDBTK_CLASSIFYWF' {
        ext.args   = "--extension gz"
        ext.prefix = { "${meta.id}" }
        tag        = { "${meta.id}" }
        publishDir = [
            path: { "${params.outdir}/bins/taxonomy/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'HMMER_HMMSEARCH' {
        ext.args   = { "" }
        ext.prefix = { "${meta.id}_${meta.assembler}_${hmmfile}" }
        tag        = { "${meta.id}_${meta.assembler}_${hmmfile}" }
    }

    withName: 'INFERNAL_CMSEARCH' {
        ext.args   = { "--notrunc" }
        ext.prefix = { "${meta.id}_${meta.assembler}.rrna" }
        tag        = { "${meta.id}_${meta.assembler}" }
        publishDir = [
            path: { "${params.outdir}/assembly/qc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*.tbl"
        ]
    }

    withName: 'MAGSCOT_MAGSCOT' {
        ext.prefix = { "${meta.id}_${meta.assembler}_magscot" }
        tag        = { "${meta.id}_${meta.assembler}" }
        publishDir = [
            path: { "${params.outdir}/bins/log/magscot" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'MAXBIN2' {
        ext.args   = { "-min_contig_length ${params.minimum_contig_size}" }
        ext.prefix = { "${meta.id}_${meta.assembler}_maxbin2" }
        tag        = { "${meta.id}_${meta.assembler}" }
        publishDir = [
            [
            path: { "${params.outdir}/bins/fasta/maxbin2" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*.fasta.gz"
            ],
            [
            path: { "${params.outdir}/bins/log/maxbin2" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> (filename.equals('versions.yml') || filename ==~ /.*\.fasta\.gz/ )? null : filename }
            ]
        ]
    }

    withName: 'METABAT2_METABAT2' {
        ext.args   = [
            "--minContig ${params.minimum_contig_size}",
            "--minClsSize ${params.minimum_bin_size}"
        ].join(" ").trim()
        ext.prefix = { "${meta.id}_${meta.assembler}_metabat2" }
        tag        = { "${meta.id}_${meta.assembler}" }
        publishDir = [
            [
            path: { "${params.outdir}/bins/fasta/metabat2" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*.fa.gz"
            ],
            [
            path: { "${params.outdir}/bins/log/metabat2" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> (filename.equals('versions.yml') || filename ==~ /.*\.fa\.gz/ )? null : filename }
            ]
        ]
    }

    withName: 'METAMDBG_ASM' {
        ext.args   = { "" }
        ext.prefix = { "${meta.id}_metamdbg" }
        publishDir = [
            [
            path: { "${params.outdir}/assembly/fasta/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*.fasta.gz"
            ],
            [
            path: { "${params.outdir}/assembly/log/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*.log"
            ]
        ]
    }

    withName: 'METATOR_PROCESS_INPUT_BAM' {
        ext.prefix = { "${meta.id}_${meta.assembler}" }
        tag        = { "${meta.id}_${meta.assembler}" }
    }

    withName: 'METATOR_PIPELINE' {
        ext.args   = { "--start bam" }
        ext.prefix = { "${meta.id}_${meta.assembler}" } // metator already appends "_metator" to files
        tag        = { "${meta.id}_${meta.assembler}" }
        publishDir = [
            [
            path: { "${params.outdir}/bins/fasta/metator" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*.fa.gz"
            ],
            [
            path: { "${params.outdir}/bins/log/metator" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> (filename.equals('versions.yml') || filename ==~ /.*\.fa\.gz/ )? null : filename }
            ]
        ]
    }

    withName: 'MINIMAP2_ALIGN' {
        ext.args   = { "-x map-hifi" + " -I" + Math.ceil(meta2.length / 1e9) + "G" }
        ext.args2  = { "" }
        ext.prefix = { "${meta2.id}_${meta2.assembler}.minimap2.hifi" }
        tag        = { "${meta2.id}_${meta2.assembler}" }
        publishDir = [
            path: { "${params.outdir}/assembly/mapping/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*.bam"
        ]
    }

    withName: 'PYRODIGAL' {
        ext.args   = { "-p meta" }
        ext.prefix = { "${meta.id}_${meta.assembler}" }
        tag        = { "${meta.id}_${meta.assembler}" }
        publishDir = [
            path: { "${params.outdir}/${meta.assembler}/annotation/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'SAMTOOLS_MERGE_HIC_BAM' {
        ext.args   = { "-n" }
        ext.prefix = { "${meta.id}_${meta.assembler}.bwa-mem2.hic" }
        tag        = { "${meta.id}_${meta.assembler}" }
        publishDir = [
            path: { "${params.outdir}/assembly/mapping/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*.bam"
        ]
    }

    withName: 'TAXONKIT_NAME2TAXID' {
        ext.args   = { "-i 4"                    }
        ext.prefix = { "${meta.id}.gtdb_to_ncbi" }
        tag        = { "${meta.id}"              }
        publishDir = [
            path: { "${params.outdir}/bins/taxonomy/" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'TRNASCAN_SE' {
        ext.args   = { "-B -Q --brief" }
        ext.prefix = { "${meta.binid}" }
        tag        = { "${meta.binid}" }
        publishDir = [
            path: { "${params.outdir}/bins/qc/trnascan_se" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

}
