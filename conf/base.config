/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    sanger-tol/metagenomeassembly Nextflow base config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    A 'blank slate' config file, appropriate for general use on most high performance
    compute environments. Assumes that all software is installed and available on
    the PATH. Runs in `local` mode - all jobs will be run on the logged in environment.
----------------------------------------------------------------------------------------
*/

process {

    cpus   = { 1      * task.attempt }
    memory = { 6.GB   * task.attempt }
    time   = { 4.h    * task.attempt }

    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    maxRetries    = 1
    maxErrors     = '-1'

    // Process-specific resource requirements
    // NOTE - Please try and reuse the labels below as much as possible.
    //        These labels are used and recognised by default in DSL2 files hosted on nf-core/modules.
    //        If possible, it would be nice to keep the same label naming convention when
    //        adding in your local modules too.
    // See https://www.nextflow.io/docs/latest/config.html#config-process-selectors
    withLabel:process_single {
        cpus   = { 1                   }
        memory = { 6.GB * task.attempt }
        time   = { 4.h  * task.attempt }
    }

    withLabel:process_low {
        cpus   = { 2     * task.attempt }
        memory = { 12.GB * task.attempt }
        time   = { 4.h   * task.attempt }
    }

    withLabel:process_medium {
        cpus   = { 6     * task.attempt }
        memory = { 36.GB * task.attempt }
        time   = { 8.h   * task.attempt }
    }

    withLabel:process_high {
        cpus   = { 12    * task.attempt }
        memory = { 72.GB * task.attempt }
        time   = { 16.h  * task.attempt }
    }

    withLabel:process_long {
        time   = { 20.h  * task.attempt }
    }

    withLabel:process_high_memory {
        memory = { 200.GB * task.attempt }
    }

    withLabel:error_ignore {
        errorStrategy = 'ignore'
    }

    withLabel:error_retry {
        errorStrategy = 'retry'
        maxRetries    = 2
    }

    withName: BWAMEM2_INDEX {
        memory  = { 1.GB * Math.ceil(28 * meta.decompressed_size / 1e+9) * task.attempt }
    }

    withName: CHECKM2_PREDICT {
        cpus = 32
        memory = { 50.Gb * task.attempt }
    }

    withName: CRAM_FILTER_ALIGN_BWAMEM2_FIXMATE_SORT {
        cpus    = { 16   * 1 }
        memory  = { 1.GB * (meta.decompressed_size < 2e9 ? 80 : Math.ceil((meta.decompressed_size / 1e+9) * 30) * Math.ceil(task.attempt * 1 )) }
    }

    withName: GTDBTK_CLASSIFYWF {
        cpus   = { 16 * task.attempt     }
        memory = { 128.GB * task.attempt }
        time   = { 24.h * task.attempt   }
    }

    withName: HMMER_HMMSEARCH {
        cpus   = 16
        memory = { 50.Gb * task.attempt }
    }

    withName: INFERNAL_CMSEARCH {
        cpus   = 16
        memory = { 50.Gb * task.attempt }
    }

    withName: METAMDBG_ASM {
        cpus   = 32
        memory = { 50.Gb * task.attempt }
        // 1 day run time for every 7 Gb of input files
        time   = { 1.day * (reads.collect{ file -> file.size() }.sum() / 7e+9 ) * task.attempt }
    }

    withName: METATOR_PROCESS_INPUT_BAM {
        time = { 1.day * task.attempt }
    }

    withName: MINIMAP2_INDEX {
        cpus    = { 2    * task.attempt }
        memory  = { 1.GB * Math.ceil(30 * meta.decompressed_size / 1e+9) * task.attempt }
    }

    withName: MINIMAP2_ALIGN {
        cpus    = 16
        memory  = { 1.GB * (meta.decompressed_size < 2e9 ? 50 : Math.ceil((meta.decompressed_size / 1e+9) * 20) * Math.ceil(task.attempt * 1)) }
    }

    withName: PYRODIGAL {
        cpus = 16
        memory  = { 1.GB * Math.ceil((meta.decompressed_size / 1e+9 ) * 20) * task.attempt }
    }

    withName: SAMTOOLS_MERGE_HIC_BAM {
        time = { 2.day * task.attempt  }
    }

}
